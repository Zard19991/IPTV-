V2rayInboundProtocol()
{
    echo
    inbound_protocols=( 'vmess' 'vless' 'vliteu' 'http' 'socks' 'shadowsocks' 'dokodemo-door' 'trojan' )
    inquirer list_input "选择入站代理协议" inbound_protocols inbound_protocol
}

V2rayInboundSettings()
{
    return
}

V2rayInboundPortValidator()
{
    if [ "$1" == "$i18n_random" ] || [[ "$1" =~ ^[1-9][0-9]*$ ]] || [[ "$1" =~ ^([1-9][0-9]*)-([1-9][0-9]*)$ ]]
    then
        return 0
    fi

    return 1
}

V2rayInboundPort()
{
    Println "$tip 数值或范围,比如 1234、5-10"
    inquirer text_input "输入入站端口" inbound_port "$i18n_random" V2rayInboundPortValidator

    if [ "$inbound_port" == "$i18n_random" ] 
    then
        inbound_port=$(GetFreePort)
        Println "  入站端口: ${green}$inbound_port${normal}"
    fi
}

V2rayInboundListen()
{
    Println "$tip 填写 Unix domain socket 时, 入站端口将被忽略"
    inquirer text_input "输入入站监听地址" inbound_listen 0.0.0.0
}

V2rayInboundTag()
{
    echo
    inquirer text_input "输入入站标识" inbound_tag "$i18n_random"

    if [ "$inbound_tag" == "$i18n_random" ] 
    then
        local free_tag
        while true 
        do
            free_tag=$(RandStr)
            if ! grep -q '"tag": "'"$free_tag"'"' < "$V2_CONFIG"
            then
                inbound_tag="$free_tag"
                break
            fi
        done
        Println "  入站标识: ${green}$inbound_tag${normal}"
    fi
}

V2rayInboundSniffingEnabled()
{
    echo
    inquirer list_input_index "是否开启流量探测" ny_options ny_options_index

    if [ "$ny_options_index" -eq 0 ] 
    then
        inbound_sniffing_enabled=false
    else
        inbound_sniffing_enabled=true
    fi
}

V2rayInboundSniffingDestOverride()
{
    inbound_sniffing_dest_override_options=( 'http' 'tls' 'quic' 'fakedns' 'fakedns+others' )

    Println "$tip 当流量为指定类型时，按其中包括的目标地址重置当前连接的目标"
    inquirer checkbox_input "指定流量类型: " inbound_sniffing_dest_override_options inbound_sniffing_dest_override_options_selected

    inbound_sniffing_dest_override=$(JoinByChar , "${inbound_sniffing_dest_override_options_selected[@]}")
}

V2rayInboundSniffingMetadataOnly()
{
    echo
    inquirer list_input_index "仅使用元数据推断目标地址而不截取流量内容" ny_options ny_options_index

    if [ "$ny_options_index" -eq 0 ] 
    then
        inbound_sniffing_metadata_only=false
    else
        inbound_sniffing_metadata_only=true
    fi
}

V2rayInboundSniffing()
{
    V2rayInboundSniffingEnabled

    if [ "$inbound_sniffing_enabled" = false ] 
    then
        inbound_sniffing_dest_override=""
        inbound_sniffing_metadata_only=false
        return
    fi

    V2rayInboundSniffingDestOverride
    V2rayInboundSniffingMetadataOnly

    new_sniffing=$(
    $JQ_FILE -n --arg enabled "$sniffing_enabled" \
        --argjson destOverride "[$sniffing_dest_override]" \
        --arg metadataOnly "$sniffing_metadata_only" \
    '{
        "enabled": $enabled | test("true"),
        "destOverride": $destOverride,
        "metadataOnly": $metadataOnly | test("true")
    }')
}

V2rayInboundAdd()
{
    V2rayInboundProtocol
    V2rayInboundSettings
    V2rayInboundPort
    V2rayInboundListen
    V2rayInboundTag
    V2rayInboundSniffing
    V2rayStream

    new_inbound=$(
    $JQ_FILE -n --arg listen "$inbound_listen" \
        --arg port "$inbound_port" \
        --arg protocol "$inbound_protocol" \
        --argjson settings "$inbound_settings" \
        --argjson streamSettings "$new_stream" \
        --argjson sniffing "$new_sniffing" \
        --arg tag "$inbound_tag" \
    '{
        "listen": $listen,
        "port": $port | tonumber,
        "protocol": $protocol,
        "settings": $settings,
        "streamSettings": $streamSettings,
        "sniffing": $sniffing,
        "tag": $tag
    }')

    if [ -n "$sockopt_tfo" ] 
    then
        if [ "$sockopt_tfo" = true ] || [ "$sockopt_tfo" = false ]
        then
            new_inbound=$(
            $JQ_FILE --arg tcpFastOpen "$sockopt_tfo" \
            '. * 
            {
                "streamSettings": {
                    "sockopt": {
                        "tcpFastOpen": $tcpFastOpen | test("true")
                    }
                }
            }' <<< "$new_inbound")
        else
            new_inbound=$(
            $JQ_FILE --arg tcpFastOpen "$sockopt_tfo" \
            '. * 
            {
                "streamSettings": {
                    "sockopt": {
                        "tcpFastOpen": $tcpFastOpen | tonumber
                    }
                }
            }' <<< "$new_inbound")
        fi
    fi

    if [[ ! "$port" =~ ^[0-9]+$ ]] 
    then
        SetV2rayAllocateStrategy
        if [ "$allocate_strategy" == "random" ] 
        then
            SetV2rayAllocateRefresh
            SetV2rayAllocateConcurrency
            new_inbound=$(
            $JQ_FILE --arg strategy "$allocate_strategy" --arg refresh "$allocate_refresh" \
            --arg concurrency "$allocate_concurrency" \
            '. * 
            {
                "allocate": {
                    "strategy": $strategy,
                    "refresh": $refresh | tonumber,
                    "concurrency": $concurrency | tonumber
                }
            }' <<< "$new_inbound")
        fi
    fi

    if [ "$security" == "tls" ] 
    then
        V2rayTlsServerName

        if [ -n "$tls_server_name" ] 
        then
            new_inbound=$(
            $JQ_FILE --arg serverName "$tls_server_name" \
            '. * 
            {
                "streamSettings": {
                    "tlsSettings": {
                        "serverName": $serverName
                    }
                }
            }' <<< "$new_inbound")
        fi

        V2rayTlsAlpn
        V2rayTlsDisableSystemRoot
        V2rayTlsVerifyClientCertificate

        new_inbound=$(
        $JQ_FILE --argjson alpn "[$tls_alpn]" --arg disableSystemRoot "$tls_disable_system_root" \
            --arg verifyClientCertificate "$tls_verify_client_certificate" \
        '. * 
        {
            "streamSettings": {
                "tlsSettings": {
                    "alpn": $alpn,
                    "disableSystemRoot": $disableSystemRoot | test("true"),
                    "verifyClientCertificate": $verifyClientCertificate | test("true")
                }
            }
        }' <<< "$new_inbound")

        while true 
        do
            if [ "$tls_disable_system_root" = false ] 
            then
                echo
                inquirer list_input "是否继续添加证书" ny_options continue_yn
                if [ "$continue_yn" == "$i18n_no" ] 
                then
                    break
                fi
            fi
            Println "$info 设置证书"
            V2rayCertificates
            merge=$(
            $JQ_FILE -n --argjson certificates "[$certificate]" \
            '{
                "streamSettings": {
                    "tlsSettings": {
                        "certificates": $certificates
                    }
                }
            }')
            JQs merge new_inbound "$merge"
            if [ "$tls_disable_system_root" = true ] 
            then
                echo
                inquirer list_input "是否继续添加证书" ny_options continue_yn
                if [ "$continue_yn" == "$i18n_no" ] 
                then
                    break
                fi
            fi
        done
    elif [ "$security" == "xtls" ] 
    then
        V2rayTlsServerName

        if [ -n "$tls_server_name" ] 
        then
            new_inbound=$(
            $JQ_FILE --arg serverName "$tls_server_name" \
            '. * 
            {
                "streamSettings": {
                    "xtlsSettings": {
                        "serverName": $serverName
                    }
                }
            }' <<< "$new_inbound")
        fi

        V2rayTlsAlpn
        V2rayTlsDisableSystemRoot
        V2rayTlsMinVersion
        V2rayTlsMaxVersion
        V2rayTlsPreferServerCipherSuites
        V2rayTlsCipherSuites
        V2rayTlsRejectUnknownSni

        new_inbound=$(
        $JQ_FILE --argjson alpn "[$tls_alpn]" --arg minVersion "$tls_min_version" \
            --arg maxVersion "$tls_max_version" --arg preferServerCipherSuites "$tls_prefer_server_cipher_suites" \
            --arg cipherSuites "$tls_cipher_suites" --arg disableSystemRoot "$tls_disable_system_root" \
            --arg rejectUnknownSni "$tls_reject_unknown_sni" \
        '. * 
        {
            "streamSettings": {
                "xtlsSettings": {
                    "alpn": $alpn,
                    "minVersion": $minVersion,
                    "maxVersion": $maxVersion,
                    "preferServerCipherSuites": $preferServerCipherSuites | test("true"),
                    "cipherSuites": $cipherSuites,
                    "disableSystemRoot": $disableSystemRoot | test("true"),
                    "rejectUnknownSni": $rejectUnknownSni | test("true")
                }
            }
        }' <<< "$new_inbound")

        while true 
        do
            if [ "$tls_disable_system_root" = false ] 
            then
                echo
                inquirer list_input "是否继续添加证书" ny_options continue_yn
                if [ "$continue_yn" == "$i18n_no" ] 
                then
                    break
                fi
            fi
            Println "$info 设置证书"
            V2rayCertificates
            merge=$(
            $JQ_FILE -n --argjson certificates "[$certificate]" \
            '{
                "streamSettings": {
                    "xtlsSettings": {
                        "certificates": $certificates
                    }
                }
            }')
            JQs merge new_inbound "$merge"
            if [ "$tls_disable_system_root" = true ] 
            then
                echo
                inquirer list_input "是否继续添加证书" ny_options continue_yn
                if [ "$continue_yn" == "$i18n_no" ] 
                then
                    break
                fi
            fi
        done
    fi

    if [ "$protocol" == "vmess" ] 
    then
        V2rayDisableInsecureEncryption

        new_inbound=$(
        $JQ_FILE --arg disableInsecureEncryption "$disable_insecure_encryption" \
        '. * 
        {
            "settings": {
                "clients": [],
                "disableInsecureEncryption":$disableInsecureEncryption | test("true")
            }
        }' <<< "$new_inbound")

        V2rayDetourTo

        if [ "$detour_to" != "$i18n_not_set" ] 
        then
            V2rayDetourDefault
            new_inbound=$(
            $JQ_FILE --arg level "$level" --arg alterId "$alter_id" --arg to "$detour_to" \
            '. * 
            {
                "settings": {
                    "default": {
                        "level": $level | tonumber,
                        "alterId": $alterId | tonumber
                    },
                    "detour": {
                        "to": $to
                    }
                }
            }' <<< "$new_inbound")
        fi
    elif [ "$protocol" == "vless" ] || [ "$protocol" == "trojan" ]
    then
        new_inbound=$(
        $JQ_FILE \
        '. * 
        {
            "settings": {
                "clients": []
            }
        }' <<< "$new_inbound")

        if [ "$protocol" == "vless" ] 
        then
            new_inbound=$(
            $JQ_FILE \
            '. * 
            {
                "settings": {
                    "decryption":"none"
                }
            }' <<< "$new_inbound")
        fi

        if { [ "$security" == "tls" ] || [ "$security" == "xtls" ]; } && [ "$network" == "tcp" ] && [[ $tls_alpn == *"http/1.1"* ]]
        then
            V2rayFallbacks

            if [ "$v2ray_fallbacks" != "[]" ] 
            then
                new_inbound=$(
                $JQ_FILE --argjson fallbacks "$v2ray_fallbacks" \
                '. * 
                {
                    "settings": {
                        "fallbacks":$fallbacks
                    }
                }' <<< "$new_inbound")
            fi
        fi
    elif [ "$protocol" == "http" ] 
    then
        V2rayTimeout
        V2rayAllowTransparent
        V2rayLevel

        new_inbound=$(
        $JQ_FILE --arg timeout "$timeout" --arg allowTransparent "$allow_transparent" \
        --arg userLevel "$level" \
        '. * 
        {
            "settings": {
                "timeout": $timeout | tonumber,
                "accounts": [],
                "allowTransparent": $allowTransparent | test("true"),
                "userLevel": $userLevel | tonumber
            }
        }' <<< "$new_inbound")
    elif [ "$protocol" == "socks" ] 
    then
        V2rayLevel
        V2rayAuth
        V2rayUdp

        new_inbound=$(
        $JQ_FILE --arg auth "$auth" --arg udp "$udp" \
        --arg userLevel "$level" \
        '. * 
        {
            "settings": {
                "auth": $auth,
                "udp": $udp | test("true"),
                "userLevel": $userLevel | tonumber
            }
        }' <<< "$new_inbound")

        if [ "$udp" = true ] 
        then
            V2rayIp
            new_inbound=$(
            $JQ_FILE --arg ip "$ip" \
            '. * 
            {
                "settings": {
                    "ip": $ip
                }
            }' <<< "$new_inbound")
        fi
    elif [ "$protocol" == "shadowsocks" ] 
    then
        if [ "$v2ray_name" == "xray" ] && [[ $($V2CTL_FILE version | head -1 | cut -d' ' -f2) =~ ([^.]+).([^.]+).([^.]+) ]] && \
        [ "${BASH_REMATCH[1]}" -ge 1 ] && [ "${BASH_REMATCH[2]}" -ge 2 ] && [ "${BASH_REMATCH[3]}" -ge 3 ]
        then
            V2raySettingsNetwork

            new_inbound=$(
            $JQ_FILE --arg network "$settings_network" \
            '. * 
            {
                "settings": {
                    "clients": [],
                    "network": $network
                }
            }' <<< "$new_inbound")
        else
            V2rayEmail
            V2rayShadowsocksMethod
            V2rayPassword
            V2rayLevel
            V2raySettingsNetwork

            new_inbound=$(
            $JQ_FILE --arg email "$email" --arg method "$shadowsocks_method" \
            --arg password "$password" --arg level "$level" \
            --arg network "$settings_network" \
            '. * 
            {
                "settings": {
                    "email": $email,
                    "method": $method,
                    "password": $password,
                    "level": $level | tonumber,
                    "network": $network
                }
            }' <<< "$new_inbound")

            if [ "$v2ray_name" == "v2ray" ] 
            then
                V2rayIvCheck

                new_inbound=$(
                $JQ_FILE --arg ivCheck "$iv_check" \
                '. * 
                {
                    "settings": {
                        "ivCheck": $ivCheck | test("true")
                    }
                }' <<< "$new_inbound")
            fi
        fi
    elif [ "$protocol" == "dokodemo-door" ] 
    then
        echo
        inquirer list_input "是否用于 api 查询" ny_options yn_option

        if [ "$yn_option" == "$i18n_yes" ] 
        then
            new_inbound=$(
            $JQ_FILE \
            '. * 
            {
                "settings": {
                    "address": "127.0.0.1",
                }
            }' <<< "$new_inbound")
        else
            V2raySettingsNetwork
            V2rayTimeout
            V2rayLevel
            V2rayFollowRedirect

            if [ "$follow_redirect" = true ] 
            then
                new_inbound=$(
                $JQ_FILE --arg network "$settings_network" --arg timeout "$timeout" \
                --arg followRedirect "$follow_redirect" --arg userLevel "$level" \
                '. * 
                {
                    "settings": {
                        "network": $network,
                        "timeout": $timeout | tonumber,
                        "followRedirect": $followRedirect | test("true"),
                        "userLevel": $userLevel | tonumber
                    }
                }' <<< "$new_inbound")
            else
                V2rayAddress
                V2rayAddressPort

                new_inbound=$(
                $JQ_FILE --arg address "$address" --arg port "$address_port" \
                --arg network "$settings_network" --arg timeout "$timeout" \
                --arg followRedirect "$follow_redirect" --arg userLevel "$level" \
                '. * 
                {
                    "settings": {
                        "address": $address,
                        "port": $port | tonumber,
                        "network": $network,
                        "timeout": $timeout | tonumber,
                        "followRedirect": $followRedirect | test("true"),
                        "userLevel": $userLevel | tonumber
                    }
                }' <<< "$new_inbound")
            fi
        fi
    fi

    if [ "$network" == "ws" ] 
    then
        V2rayAcceptProxyProtocol
        V2rayPath
        V2rayWsHeaders

        new_inbound=$(
        $JQ_FILE --arg acceptProxyProtocol "$accept_proxy_protocol" \
            --arg path "$path" --argjson headers "{$ws_headers}" \
        '. * 
        {
            "streamSettings": {
                "wsSettings": {
                    "acceptProxyProtocol": $acceptProxyProtocol | test("true"),
                    "path": $path,
                    "headers": $headers
                }
            }
        }' <<< "$new_inbound")

        if [ "$v2ray_name" == "v2ray" ] 
        then
            V2rayInboundMaxEarlyData

            if [ "$max_early_data" -gt 0 ] 
            then
                V2rayEarlyDataHeaderName

                if [ -n "$early_data_header_name" ] && [ "$early_data_header_name" != "Sec-WebSocket-Protocol" ]
                then
                    use_browser_forwarding=false
                else
                    V2rayUseBrowserForwarding
                fi
            else
                early_data_header_name=""
                use_browser_forwarding=false
            fi

            new_inbound=$(
            $JQ_FILE --arg maxEarlyData "$max_early_data" \
                --arg earlyDataHeaderName "$early_data_header_name" \
                --arg useBrowserForwarding "$use_browser_forwarding" \
            '. * 
            {
                "streamSettings": {
                    "wsSettings": {
                        "maxEarlyData": $maxEarlyData | tonumber,
                        "earlyDataHeaderName": $earlyDataHeaderName,
                        "useBrowserForwarding": $useBrowserForwarding | test("true")
                    }
                }
            }' <<< "$new_inbound")
        fi
    elif [ "$network" == "tcp" ] 
    then
        V2rayAcceptProxyProtocol
        V2rayHeaderType

        new_inbound=$(
        $JQ_FILE --arg acceptProxyProtocol "$accept_proxy_protocol" \
            --arg header_type "$header_type" --argjson request "$header_http_request" \
            --argjson response "$header_http_response" \
        '. * 
        {
            "streamSettings": {
                "tcpSettings": {
                    "acceptProxyProtocol": $acceptProxyProtocol | test("true"),
                    "header": {
                        "type": $header_type,
                        "request": $request,
                        "response": $response
                    }
                }
            }
        }' <<< "$new_inbound")
    elif [ "$network" == "kcp" ] 
    then
        V2rayHeaderType
        V2rayKcpMtu
        V2rayKcpTti
        V2rayKcpUplinkCapacity
        V2rayKcpDownlinkCapacity
        V2rayKcpCongestion
        V2rayKcpReadBufferSize
        V2rayKcpWriteBufferSize
        V2rayKcpSeed

        new_inbound=$(
        $JQ_FILE --arg mtu "$kcp_mtu" --arg tti "$kcp_tti" \
            --arg uplinkCapacity "$kcp_uplink_capacity" --arg downlinkCapacity "$kcp_downlink_capacity" \
            --arg congestion "$kcp_congestion" --arg readBufferSize "$kcp_read_buffer_size" \
            --arg writeBufferSize "$kcp_write_buffer_size"  --arg header_type "$header_type" \
            --arg seed "$kcp_seed" \
        '. * 
        {
            "streamSettings": {
                "kcpSettings": {
                    "mtu": $mtu | tonumber,
                    "tti": $tti | tonumber,
                    "uplinkCapacity": $uplinkCapacity | tonumber,
                    "downlinkCapacity": $downlinkCapacity | tonumber,
                    "congestion": $congestion | test("true"),
                    "readBufferSize": $readBufferSize | tonumber,
                    "writeBufferSize": $writeBufferSize | tonumber,
                    "header": {
                        "type": $header_type
                    },
                    "seed": $seed
                }
            }
        }' <<< "$new_inbound")
    elif [ "$network" == "http" ] 
    then
        V2rayHttpHost
        V2rayPath
        V2rayHttpHeaders

        new_inbound=$(
        $JQ_FILE --argjson host "[$http_host]" --arg path "$path" \
            --argjson headers "{$http_headers}" \
        '. * 
        {
            "streamSettings": {
                "httpSettings": {
                    "host": $host,
                    "path": $path,
                    "headers": $headers
                }
            }
        }' <<< "$new_inbound")

        if [ "$v2ray_name" == "v2ray" ] 
        then
            V2rayHttpMethod

            new_inbound=$(
            $JQ_FILE --arg method "$http_method" \
            '. * 
            {
                "streamSettings": {
                    "httpSettings": {
                        "method": $method
                    }
                }
            }' <<< "$new_inbound")
        fi
    elif [ "$network" == "quic" ] 
    then
        V2rayQuicSecurity
        V2rayQuicKey
        V2rayHeaderType

        new_inbound=$(
        $JQ_FILE --arg security "$quic_security" \
            --arg key "$quic_key" --arg header_type "$header_type" \
        '. * 
        {
            "streamSettings": {
                "quicSettings": {
                    "security": $security,
                    "key": $key,
                    "header": {
                        "type": $header_type
                    }
                }
            }
        }' <<< "$new_inbound")
    elif [ "$network" == "domainsocket" ] 
    then
        V2rayDsPath
        V2rayDsAbstract
        V2rayDsPadding

        new_inbound=$(
        $JQ_FILE --arg path "$ds_path" \
            --arg abstract "$ds_abstract" --arg padding "$ds_padding" \
        '. * 
        {
            "streamSettings": {
                "dsSettings": {
                    "path": $ds_path,
                    "abstract": $abstract | test("true"),
                    "padding": $padding | test("true")
                }
            }
        }' <<< "$new_inbound")
    else
        V2rayGrpcServiceName

        new_inbound=$(
        $JQ_FILE --arg grpcSettings "$grpc_service_name" \
        '. * 
        {
            "streamSettings": {
                "grpcSettings": {
                    "serviceName": $serviceName
                }
            }
        }' <<< "$new_inbound")

        if [ "$v2ray_name" == "xray" ] 
        then
            V2rayGrpcMultiMode

            new_inbound=$(
            $JQ_FILE --arg multiMode "$grpc_multi_mode" \
            '. * 
            {
                "streamSettings": {
                    "grpcSettings": {
                        "multiMode": $multiMode | test("true")
                    }
                }
            }' <<< "$new_inbound")
        fi
    fi

    jq_path='["inbounds"]'
    JQ add "$V2_CONFIG" "[$new_inbound]"

    Println "$info 入站 $tag 添加成功\n"
}
